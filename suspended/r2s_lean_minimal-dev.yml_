name: r2s Lean版openwrt minimal

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/r2s_lean_minimal-dev.yml'
  schedule:
    - cron: '10 08 * * *'

jobs:

  build:

    runs-on: ubuntu-latest
    if: github.repository == 'klever1988/nanopi-openwrt'

    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: . 1_initialization_environment.sh

      - name: Clone Source
        run: . 2_clone_source.sh master-v19.07.1 rk3328

      - name: Patch Kernel
        run: . patch_kernel_5.4-test.sh

      - name: Mods
        run: |
          cd friendlywrt-rk3328
          . ../remove_unused_config.sh
          cat configs/config_rk3328 | grep "TARGET" >> ../base_rk3328.seed
          cat ../minimal_config.seed >> ../base_rk3328.seed
          cat ../base_rk3328.seed > configs/config_rk3328
          cd friendlywrt
          git remote add upstream https://github.com/project-openwrt/openwrt && git fetch upstream
          git checkout upstream/openwrt-18.06 -b tmp
          git mv README.md README
          git commit -m 'reset'
          git checkout master-v19.07.1
          git rebase adc1a9a3676b8d7be1b48b5aed185a94d8e42728^ --onto tmp -X theirs
          rm -f target/linux/rockchip-rk3328/patches-4.14/0001-net-thunderx-workaround-BGX-TX-Underflow-issue.patch
          git checkout upstream/openwrt-18.06 -- feeds.conf.default
          cd package/ctcgfw/
          . ../../../../3_prepare_packages.sh
          cd ../../
          git apply ../../enable_autocore_ctcgfw_master.diff
          . ../../5_mods.sh
          mv ../../scripts/check_wan4.sh package/base-files/files/usr/bin && sed -i '/exit/i\/bin/sh /usr/bin/check_wan4.sh &' package/base-files/files/etc/rc.local
          mv ../../scripts/autoupdate.sh package/base-files/files/root/au.sh && chmod +x package/base-files/files/root/au.sh

      - name: Add OpenClash Core
        run: |
          cd friendlywrt-rk3328/friendlywrt/package/base-files/files
          mkdir -p etc/openclash/core && cd etc/openclash/core
          curl -L https://github.com/vernesong/OpenClash/releases/download/Clash/clash-linux-armv8.tar.gz | tar zxf -
          chmod +x clash

      - name: Build FriendlyWrt
        run: . 4_build_image.sh friendlywrt-rk3328 nanopi_r2s.mk

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          . x_assemble_artifact.sh
          release_tag="R2S-Minimal-$(date +%Y-%m-%d)-dev"
          echo "##[set-output name=release_tag;]$release_tag"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: 仅测试勿使用 ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifact.zip
          asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
          asset_content_type: application/zip
